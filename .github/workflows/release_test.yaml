---
name: Release Test

on:
  repository_dispatch:
    types: [release-dispatcher]

env:
  TOKEN: ${{ secrets.TOKEN }}
  # renovate: datasource=github-releases depName=aelsabbahy/goss
  GOSS_VERSION: v0.3.18

jobs:
  release-test:
    name: Build Container Test
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        app: 
          - ${{ github.event.client_payload.app }}
        channel: ${{ github.event.client_payload.channels }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
          fetch-depth: 1

      - name: Set up workflow variables
        id: vars
        run: |-
          container_app=${{ matrix.app }}
          container_channel=${{ matrix.channel }}

          container_stable=$(jq --arg c "${container_channel}" '(.channels | .[] | select(.name == $c)).stable' ./apps/${container_app}/metadata.json5)
          container_platforms=$(jq --arg c "${container_channel}" '(.channels | .[] | select(.name == $c)).platforms | join(",")' ./apps/${container_app}/metadata.json5)
          container_published_version=$(bash ./.github/scripts/published_test.sh "${container_app}" "${container_channel}" "${container_stable}")
          container_upstream_version=$(bash ./.github/scripts/upstream_test.sh "${container_app}" "${container_channel}")

          echo "::set-output name=container_published_version::${container_published_version}"
          echo "::set-output name=container_upstream_version::${container_upstream_version}"
          echo "::set-output name=container_build_date::$(date --rfc-3339=seconds --utc)"
          echo "::set-output name=container_stable::${container_stable}"
          echo "::set-output name=container_platforms::${container_platforms}"
          echo "::set-output name=container_push::true"
          echo "::set-output name=container_cache_from::type=gha"
          echo "::set-output name=container_cache_to::type=gha,mode=max"
          if test -f "./apps/${container_app}/ci/goss.yaml"; then
              echo "::set-output name=container_goss_enabled::true"
              echo "::set-output name=container_goss_config::./apps/${container_app}/ci/goss.yaml"
          fi

          if [[ "${container_app}" == "ubuntu" || "${container_app}" == "alpine" ]]; then
              echo "::set-output name=container_tag_rolling::${container_app}:${container_channel/./-}-rolling"
              echo "::set-output name=container_tag_version::${container_app}:${container_upstream_version}"
          else
              if [[ "${container_stable}" == true ]]; then
                  echo "::set-output name=container_tag_rolling::${container_app}:rolling"
                  echo "::set-output name=container_tag_version::${container_app}:v${container_upstream_version}"
              else
                  echo "::set-output name=container_tag_rolling::${container_app}-${container_channel}:rolling"
                  echo "::set-output name=container_tag_version::${container_app}-${container_channel}:v${container_upstream_version}"
              fi
          fi

          echo "::set-output name=container_dockerfile::./apps/${container_app}/Dockerfile"
          if test -f "./apps/${container_app}/${container_channel}/Dockerfile"; then
              echo "::set-output name=container_dockerfile::./apps/${container_app}/${container_channel}/Dockerfile"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ steps.vars.outputs.container_platforms }}

      - name: Login to GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest

      - name: Set up Goss
        uses: e1himself/goss-installation-action@v1.0.4
        if: ${{ steps.vars.outputs.container_goss_enabled == 'true' }}
        with:
          version: ${{ env.GOSS_VERSION }}

      - name: Build cache container
        if: ${{ steps.vars.outputs.container_goss_enabled == 'true' }}
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.container_upstream_version }}
            CHANNEL=${{ steps.vars.outputs.container_channel }}
          labels: |-
            org.opencontainers.image.created=${{ steps.vars.outputs.container_build_date }}
          context: .
          file: ${{ steps.vars.outputs.container_dockerfile }}
          load: true
          tags: |-
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.container_tag_rolling }}
          cache-from: ${{ steps.vars.outputs.container_cache_from }}
          cache-to: ${{ steps.vars.outputs.container_cache_to }}

      - name: Run Goss tests
        id: dgoss
        if: ${{ steps.vars.outputs.container_goss_enabled == 'true' }}
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ steps.vars.outputs.container_goss_config }}
          GOSS_OPTS: |-
            --retry-timeout 60s --sleep 2s --color --format documentation
        run: |-
          dgoss run ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.container_tag_rolling }}

      # - name: Release
      #   id: release
      #   uses: docker/build-push-action@v3
      #   with:
      #     build-args: |-
      #       VERSION=${{ steps.vars.outputs.container_upstream_version }}
      #       CHANNEL=${{ steps.vars.outputs.container_channel }}
      #     labels: |-
      #       org.opencontainers.image.created=${{ steps.vars.outputs.container_build_date }}
      #     context: .
      #     platforms: ${{ steps.vars.outputs.container_platforms }}
      #     file: ${{ steps.vars.outputs.container_dockerfile }}
      #     push: ${{ steps.vars.outputs.container_push }}
      #     tags: |-
      #       ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.container_tag_rolling }}
      #       ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.container_tag_version }}
      #     cache-from: ${{ steps.vars.outputs.container_cache_from }}
      #     cache-to: ${{ steps.vars.outputs.container_cache_to }}
