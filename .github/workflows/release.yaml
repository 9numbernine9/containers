---
name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**/metadata.json'

env:
  GOSS_SLEEP: 30

jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-latest
    outputs:
      matrix: "{\"container\": ${{ steps.changed.outputs.containers }} }"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
          fetch-depth: 0 # needed for tj-actions/changed-files

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          filters: |
            changed:
              - added|modified:
                  - '**/metadata.json'

      - name: Debug filter
        run: echo "${{ toJson(steps.filter.outputs) }}"

      - name: Gather changes
        id: changed
        run: |
          tmp=$(mktemp -d) && echo '${{ toJson(steps.filter.outputs) }}' > "${tmp}/changes.json"
          changed_files=$(jq --raw-output '.changed_files' "${tmp}/changes.json") && rm -rf "${tmp}"
          echo ::set-output name=containers::${changed_files}

  release:
    name: Release container
    runs-on: ubuntu-latest
    needs:
      - changes
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      max-parallel: 8
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install OS tools
        run: |
          sudo apt-get install moreutils jo

      - name: Setup common workflow vars
        id: envs
        run: |
          echo ::set-output name=__build_date::$(date --rfc-3339=seconds --utc)
          echo ::set-output name=__app::$(echo "${{ matrix.container }}" | awk -F / '{print $2}')
          echo ::set-output name=__current_version::$(jq --raw-output '.__current_version' ${{ matrix.container }})
          echo ::set-output name=__stream::$(echo "${{ matrix.container }}" | awk -F / '{print $3}')
          echo ::set-output name=__stable::$(jq --raw-output '.__stable' ${{ matrix.container }})
          echo ::set-output name=__platforms::$(jq --raw-output '.__platforms | join(",")' ${{ matrix.container }})

      - name: Setup Tags
        id: tags
        run: |
          [[ "${{ steps.envs.outputs.__app }}" != "ubuntu" ]] && v="v"
          [[ "${{ steps.envs.outputs.__stable }}" == "false" ]] && s="-${{ steps.envs.outputs.__stream }}"
          rolling="${{ steps.envs.outputs.__app }}${s}:rolling"
          echo ::set-output name=rolling::ghcr.io/${{ github.repository_owner }}/${rolling}
          semver="${{ steps.envs.outputs.__app }}${s}:${v}${{ steps.envs.outputs.__current_version }}"
          echo ::set-output name=semver::ghcr.io/${{ github.repository_owner }}/${semver}

      - name: Setup Dockerfile
        id: dockerfile
        run: |
          echo ::set-output name=dockerfile::images/${{ steps.envs.outputs.__app }}/Dockerfile
          if [[ -f "${{ matrix.container }}/Dockerfile" ]]; then
              echo ::set-output name=dockerfile::${{ matrix.container }}/Dockerfile
          fi

      - name: Setup Goss
        id: goss
        run: |
          if test -f "images/${{ steps.envs.outputs.__app }}/goss.yaml"; then
              echo ::set-output name=enabled::true
          else
              echo ::set-output name=enabled::false
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ steps.envs.outputs.__platforms }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest

      - name: Set up GOSS
        uses: e1himself/goss-installation-action@v1.0.4
        if: ${{ steps.goss.outputs.enabled == 'true' }}
        with:
          version: v0.3.18

      - name: Build cache container
        if: ${{ steps.goss.outputs.enabled == 'true' }}
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ steps.envs.outputs.__current_version }}
            STREAM=${{ steps.envs.outputs.__stream }}
          labels: |
            org.opencontainers.image.created=${{ steps.envs.outputs.__build_date }}
          context: .
          # platforms: ${{ steps.envs.outputs.__platforms }}
          file: ${{ steps.dockerfile.outputs.dockerfile }}
          load: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ steps.envs.outputs.__app }}-${{ steps.envs.outputs.__stream }}:cachez
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run GOSS tests
        id: dgoss
        if: ${{ steps.goss.outputs.enabled == 'true' }}
        env:
          GOSS_FILE: images/${{ steps.envs.outputs.__app }}/goss.yaml
        run: |
          dgoss run ghcr.io/${{ github.repository_owner }}/${{ steps.envs.outputs.__app }}-${{ steps.envs.outputs.__stream }}:cachez

      - name: Release
        id: release
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ steps.envs.outputs.__current_version }}
            STREAM=${{ steps.envs.outputs.__stream }}
          labels: |
            org.opencontainers.image.created=${{ steps.envs.outputs.__build_date }}
          context: .
          platforms: ${{ steps.envs.outputs.__platforms }}
          file: ${{ steps.dockerfile.outputs.dockerfile }}
          push: true
          tags: |
            ${{ steps.tags.outputs.rolling }}
            ${{ steps.tags.outputs.semver }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build successful
        id: build-success
        if: ${{ always() }}
        run: |
          jq '.__build_status.__success = true' "${{ matrix.container }}" | sponge "${{ matrix.container }}"
          jq --arg v "${{ steps.envs.outputs.__build_date }}" '.__build_status.__ts = $v' "${{ matrix.container }}" | sponge "${{ matrix.container }}"
          echo "::set-output name=commit-message::ðŸŽ‰ ${{ steps.envs.outputs.__app }}-${{ steps.envs.outputs.__stream }} build success"

      - name: Build failed
        id: build-failed
        if: ${{ failure() && (steps.release.outcome != 'success' || steps.dgoss.outcome != 'success') }}
        run: |
          jq '.__build_status.__success = false' "${{ matrix.container }}" | sponge "${{ matrix.container }}"
          jq --arg v "${{ steps.envs.outputs.__build_date }}" '.__build_status.__ts = $v' "${{ matrix.container }}" | sponge "${{ matrix.container }}"
          echo "::set-output name=commit-message::ðŸ’¥ ${{ steps.envs.outputs.__app }}-${{ steps.envs.outputs.__stream }} build failed"

      - name: Commit changes
        if: ${{ always() }}
        uses: EndBug/add-and-commit@v9
        with:
          message: |-
            ${{ steps.build-failed.outputs.commit-message || steps.build-success.outputs.commit-message }}
          default_author: github_actions
          pull: "--rebase --autostash"
          add: "*.json --force"
