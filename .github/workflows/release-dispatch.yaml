---
name: Release Dispatch

on:
  repository_dispatch:
    types: [release-dispatch]

env:
  TOKEN: ${{ secrets.TOKEN }}
  # renovate: datasource=github-releases depName=aelsabbahy/goss
  GOSS_VERSION: v0.3.18

jobs:
  main:
    name: Build, Test & Push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ["${{ github.event.client_payload.app }}"]
        channel: ${{ github.event.client_payload.channels }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
          fetch-depth: 1
      
      - name: Install Tools
        run: sudo apt-get install moreutils jo

      - name: Setup Workflow Variables
        id: vars
        run: |-
          container_base=$(jq '.base' ./apps/${{ matrix.app }}/metadata.json5)
          container_stable=$(jq --arg c "${{ matrix.channel }}" '(.channels | .[] | select(.name == $c)).stable' ./apps/${{ matrix.app }}/metadata.json5)
          container_platforms=$(jq --arg c "${{ matrix.channel }}" '(.channels | .[] | select(.name == $c)).platforms | join(",")' ./apps/${{ matrix.app }}/metadata.json5)
          container_published_version=$(bash ./.github/scripts/published.sh "${{ matrix.app }}" "${{ matrix.channel }}" "${container_stable}")
          container_upstream_version=$(bash ./.github/scripts/upstream.sh "${{ matrix.app }}" "${{ matrix.channel }}")

          echo "::set-output name=container_build_date::$(date --rfc-3339=seconds --utc)"
          echo "::set-output name=container_stable::${container_stable}"
          echo "::set-output name=container_platforms::${container_platforms}"
          
          echo "::set-output name=container_published_version::${container_published_version}"
          echo "::set-output name=container_upstream_version::${container_upstream_version}"

          echo "::set-output name=container_push::true"
          echo "::set-output name=container_cache_from::type=gha"
          echo "::set-output name=container_cache_to::type=gha,mode=max"

          container_gossfile="./apps/${{ matrix.app }}/${{ matrix.channel }}/goss.yaml"
          if ! test -f "${container_gossfile}"; then
              container_gossfile="./apps/${{ matrix.app }}/ci/goss.yaml"
          fi
          if test -f "${container_gossfile}"; then
              echo "::set-output name=container_goss_enabled::true"
              echo "::set-output name=container_goss_config::${container_gossfile}"
              if [[ "${container_base}" == true ]]; then
                  echo "::set-output name=container_goss_args::tail -f /dev/null"
              fi
          fi

          if [[ "${container_base}" == true ]]; then
              echo "::set-output name=container_label_type::org.opencontainers.image.base"
          else
              echo "::set-output name=container_label_type::org.opencontainers.image"
          fi

          if test -f "./apps/${{ matrix.app }}/${{ matrix.channel }}/Dockerfile"; then
              echo "::set-output name=container_dockerfile::./apps/${{ matrix.app }}/${{ matrix.channel }}/Dockerfile"
          else
              echo "::set-output name=container_dockerfile::./apps/${{ matrix.app }}/Dockerfile"
          fi

          if [[ "${container_stable}" == true ]]; then
              echo "::set-output name=container_tag_rolling::${{ matrix.app }}:rolling"
              echo "::set-output name=container_tag_version::${{ matrix.app }}:${container_upstream_version}"
          else
              echo "::set-output name=container_tag_rolling::${{ matrix.app }}-${{ matrix.channel }}:rolling"
              echo "::set-output name=container_tag_version::${{ matrix.app }}-${{ matrix.channel }}:${container_upstream_version}"
          fi

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ steps.vars.outputs.container_platforms }}

      - name: Setup GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest

      - name: Setup Goss
        uses: e1himself/goss-installation-action@v1.0.4
        if: ${{ steps.vars.outputs.container_goss_enabled == 'true' }}
        with:
          version: ${{ env.GOSS_VERSION }}

      - name: Build Cache Container
        id: release
        if: ${{ steps.vars.outputs.container_goss_enabled == 'true' }}
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.container_upstream_version }}
            CHANNEL=${{ matrix.channel }}
          labels: |-
            ${{ steps.vars.outputs.container_label_type }}.created="${{ steps.vars.outputs.container_build_date }}"
            ${{ steps.vars.outputs.container_label_type }}.title="${{ matrix.app }} (${{ matrix.channel }})"
            ${{ steps.vars.outputs.container_label_type }}.version="${{ steps.vars.outputs.container_upstream_version }}"
            ${{ steps.vars.outputs.container_label_type }}.authors="Devin Buhl <devin.kray@gmail.com>, Bernd Schorgers <me@bjw-s.dev>"
          context: .
          file: ${{ steps.vars.outputs.container_dockerfile }}
          load: true
          tags: |-
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.container_tag_rolling }}
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.container_tag_version }}
          cache-from: ${{ steps.vars.outputs.container_cache_from }}
          cache-to: ${{ steps.vars.outputs.container_cache_to }}

      - name: Run Goss Tests
        id: dgoss
        if: ${{ steps.vars.outputs.container_goss_enabled == 'true' }}
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ steps.vars.outputs.container_goss_config }}
          GOSS_OPTS: |-
            --retry-timeout 60s --sleep 2s --color --format documentation
        run: |-
          dgoss run ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.container_tag_rolling }} ${{ steps.vars.outputs.container_goss_args }}

      - name: Build & Push
        id: release
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.container_upstream_version }}
            CHANNEL=${{ matrix.channel }}
          labels: |-
            ${{ steps.vars.outputs.container_label_type }}.created="${{ steps.vars.outputs.container_build_date }}"
            ${{ steps.vars.outputs.container_label_type }}.title="${{ matrix.app }} (${{ matrix.channel }})"
            ${{ steps.vars.outputs.container_label_type }}.version="${{ steps.vars.outputs.container_upstream_version }}"
            ${{ steps.vars.outputs.container_label_type }}.authors="Devin Buhl <devin.kray@gmail.com>, Bernd Schorgers <me@bjw-s.dev>"
          context: .
          platforms: ${{ steps.vars.outputs.container_platforms }}
          file: ${{ steps.vars.outputs.container_dockerfile }}
          push: ${{ steps.vars.outputs.container_push }}
          tags: |-
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.container_tag_rolling }}
            ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.container_tag_version }}
          cache-from: ${{ steps.vars.outputs.container_cache_from }}
          cache-to: ${{ steps.vars.outputs.container_cache_to }}

      - name: Build successful
        id: build-success
        if: ${{ always() }}
        run: |-
          jq --arg c "${{ matrix.channel }}" '(.channels | .[] | select(.name == $c)).build.success = true' ./apps/${{ matrix.app }}/metadata.json5 | sponge ./apps/${{ matrix.app }}/metadata.json5
          jq --arg c "${{ matrix.channel }}" --arg d "${{ steps.vars.outputs.container_build_date }}" '(.channels | .[] | select(.name == $c)).build.ts = $d' ./apps/${{ matrix.app }}/metadata.json5 | sponge ./apps/${{ matrix.app }}/metadata.json5
          echo "::set-output name=commit-message::ðŸŽ‰ ${{ matrix.app }}-${{ matrix.channel }} (${{ steps.vars.outputs.container_upstream_version }})"

      - name: Build failed
        id: build-failed
        if: ${{ failure() && (steps.release.outcome == 'failure' || steps.dgoss.outcome != 'success') }}
        run: |-
          jq --arg c "${{ matrix.channel }}" '(.channels | .[] | select(.name == $c)).build.success = false' ./apps/${{ matrix.app }}/metadata.json5 | sponge ./apps/${{ matrix.app }}/metadata.json5
          jq --arg c "${{ matrix.channel }}" --arg d "${{ steps.vars.outputs.container_build_date }}" '(.channels | .[] | select(.name == $c)).build.ts = $d' ./apps/${{ matrix.app }}/metadata.json5 | sponge ./apps/${{ matrix.app }}/metadata.json5
          echo "::set-output name=commit-message::ðŸ’¥ ${{ matrix.app }}-${{ matrix.channel }} (${{ steps.vars.outputs.container_upstream_version }})"

      - name: Commit statuses
        id: commit-status
        if: ${{ always() }}
        continue-on-error: true
        uses: EndBug/add-and-commit@issue-406
        with:
          default_author: github_actions
          pull: --rebase --autostash
          message: |-
            ${{ steps.build-failed.outputs.commit-message || steps.build-success.outputs.commit-message }}
          add: "*.json5"

      # In the matrix it is possible for things to complete 
      # just at the right time to throw a conflict, in that 
      # case it will try to pull and commit one more time
      - name: Snoozing randomly (retry)
        if: ${{ always() && steps.commit-status.outcome == 'failure' }}
        run: |-
          perl -e 'sleep int(rand(15))'
          perl -e 'sleep int(rand(15))'

      - name: Git pull in changes (retry)
        if: ${{ always() && steps.commit-status.outcome == 'failure' }}
        run: git pull --rebase --autostash

      - name: Commit statuses (retry)
        if: ${{ always() }}
        uses: EndBug/add-and-commit@issue-406
        with:
          default_author: github_actions
          pull: --rebase --autostash
          message: |-
            ${{ steps.build-failed.outputs.commit-message || steps.build-success.outputs.commit-message }}
          add: "*.json5"
